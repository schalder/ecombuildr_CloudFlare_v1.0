import React, { useState, useEffect, useRef } from 'react';
import { Play, Users, MessageCircle, Radio, RadioIcon, Volume2, VolumeX } from 'lucide-react';
import { PageBuilderElement } from '../types';
import { renderElementStyles } from '../utils/styleRenderer';
import { parseVideoUrl } from '../utils/videoUtils';

interface ChatMessage {
  id: string;
  name: string;
  message: string;
  timestamp: number;
}

const chatMessagePool = [
  "ржзржирзНржпржмрж╛ржж, ржЦрзБржм ржХрж╛ржЬрзЗ рж▓рж╛ржЧржмрзЗ!",
  "ржПржЗ ржУрзЯрзЗржмрж┐ржирж╛рж░ржЯрж╛рж░ ржЬржирзНржп ржЕржирзЗржХржжрж┐ржи ржзрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛рзЯ ржЫрж┐рж▓рж╛ржо",
  "ржорж╛рж╢рж╛рж▓рзНрж▓рж╛рж╣ ржжрж╛рж░рзБржг ржмрзБржЭрж┐рзЯрзЗ ржмрж▓ржЫрзЗржи",
  "ржЖрж░рзЛ ржПржХржЯрзБ ржбрж┐ржЯрзЗржЗрж▓рзЗ ржмрж▓ржмрзЗржи?",
  "ржЖржЬржХрзЗрж░ ржжрзЗржЦрж╛ рж╕рзЗрж░рж╛ рж╕рзЗрж╢ржи ржПржЯрж╛",
  "ржирзЛржЯ ржирж┐ржЪрзНржЫрж┐",
  "ржЧрзЛрж▓рзНржбрзЗржи ржЗржиржлрж░ржорзЗрж╢ржи ЁЯФе",
  "ржПржХржжржо ржкрзНрж░рзНржпрж╛ржХржЯрж┐ржХрзНржпрж╛рж▓ ржХржерж╛ ржмрж▓ржЫрзЗржи",
  "ржПржЯрж╛ ржЬрж╛ржирждрж╛ржо ржирж╛, ржЕржирзЗржХ ржХрж┐ржЫрзБ рж╢рж┐ржЦрж▓рж╛ржо",
  "рж╕рждрзНржпрж┐ ржЕрж╕рж╛ржзрж╛рж░ржг рж▓рж╛ржЧржЫрзЗ",
  "ржарж┐ржХ ржПржЗ ржЬрж┐ржирж┐рж╕ржЯрж╛ржЗ ржжрж░ржХрж╛рж░ ржЫрж┐рж▓",
  "ржПржд рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзБржЭрж┐рзЯрзЗ ржжрзЗржУрзЯрж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж",
  "ржЖржкржирж╛рж░ ржЙржжрж╛рж╣рж░ржгржЧрзБрж▓рзЛ ржЦрзБржм ржХрзНрж▓рж┐рзЯрж╛рж░",
  "ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐",
  "ржЖржорж┐ ржЖржЧрзЗ ржнрзБрж▓ ржХрж░рждрж╛ржо, ржПржЦржи ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐",
  "ржУрзЯрж╛ржУ, ржПржХржжржо ржорж╛ржЗржирзНржб ржмрзНрж▓рзЛржпрж╝рж┐ржВ",
  "ржПржЗ ржЯрж┐ржкрж╕ржЯрж╛ рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрж▓рж╛ржо",
  "ржлрж╛ржЗржирж╛рж▓рж┐ ржХрзЗржЙ ржПржд ржкрж░рж┐рж╖рзНржХрж╛рж░ржнрж╛ржмрзЗ ржмрзБржЭрж╛рж▓рзЛ",
  "ржЖржкржирж╛рж░ рж╕рзНржЯрзЗржкржЧрзБрж▓рзЛ ржЦрзБржм рж╣рзЗрж▓рзНржкржлрзБрж▓",
  "рж▓рж┐ржЦрзЗ рж░рж╛ржЦрж▓рж╛ржо, ржкрж░рзЗ ржлрж▓рзЛ ржХрж░ржмрзЛ",
  "рж╕рзНржпрж╛рж░, рж╕рждрзНржпрж┐ ржЖржкржирж┐ ржЕрж╕рж╛ржзрж╛рж░ржг!",
  "ржкрзНрж░рзНржпрж╛ржХржЯрж┐ржХрзНржпрж╛рж▓ ржЧрж╛ржЗржбрж▓рж╛ржЗржи ржжрзЗрзЯрж╛рзЯ ржерзНржпрж╛ржЩрзНржХрж╕",
  "ржЖржорж┐ ржПржЯрж╛ рж╕ржЩрзНржЧрзЗ рж╕ржЩрзНржЧрзЗ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░ржмрзЛ",
  "ржПржоржи рж╕рзЗрж╢ржи ржмрж╛рж░ ржмрж╛рж░ ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ",
  "ржЖржорж┐ ржПржЦржирзЛ рж▓рж╛ржЗржн ржЖржЫрж┐",
  "ржУрж╣рж╣ ржПржЦржи ржмрзБржЭрждрзЗ ржкрж╛рж░рж▓рж╛ржо!",
  "ржЖржкржирж╛ржжрзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржПржЯрж╛ржЗ ржЖрж╢рж╛ ржХрж░рж┐",
  "ржПржЗ ржЬрж┐ржирж┐рж╕ржЯрж╛ ржХрзЗржЙ ржлрзНрж░рж┐ рж╢рзЗржЦрж╛рзЯ ржирж╛ рж╕рж╛ржзрж╛рж░ржгржд",
  "ржЖрж░рзЛ ржЯрж┐ржкрж╕ ржжрж┐рж▓рзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржмрзЗ",
  "ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣, ржЖржЬ ржЕржирзЗржХ ржХрж┐ржЫрзБ рж╢рж┐ржЦрж▓рж╛ржо",
  "ржПржЗ ржкрж╛рж░рзНржЯржЯрж╛ рж░рж┐ржкрж┐ржЯ ржХрж░рзЗ ржмрж▓ржмрзЗржи?",
  "рж╕рзБржкрж╛рж░ ржПржХрзНрж╕ржкрзНрж▓рзЗржЗржирзЗрж╢ржи",
  "ржмрж╛рж╣, ржПржХржжржо рж░рж┐рзЯрзЗрж▓ рж▓рж╛ржЗржл ржЙржжрж╛рж╣рж░ржг",
  "рж▓рж╛рж╕рзНржЯ ржкрзЯрзЗржирзНржЯржЯрж╛ ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧрж▓рзЛ",
  "ржПржЗ ржЬрж┐ржирж┐рж╕ржЯрж╛ ржЖржорж┐ ржЖржорж╛рж░ ржмрзНржпржмрж╕рж╛рзЯ рж▓рж╛ржЧрж╛ржмрзЛ",
  "ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржЖржЬржХрзЗрж░ ржжрж┐ржиржЯрж╛ рж╕ржлрж▓",
  "ржЖржорж╛рж░ ржХржиржлрж┐ржЙрж╢ржи ржПржЦржи ржХрзНрж▓рж┐рзЯрж╛рж░",
  "ржЖржЬржХрзЗ ржпрж╛ рж╢рж┐ржЦрж▓рж╛ржо, рж▓рж╛ржЗржл ржЪрзЗржЮрзНржЬрж┐ржВ",
  "ржПржЯрж╛ рждрзЛ ржПржХржжржо ржЖржорж╛рж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕рж▓рж┐ржЙрж╢ржи",
  "ржЖржорж┐ ржерж╛ржХржЫрж┐ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд",
  "ржЕрж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рзЗржЬрзЗржирзНржЯрзЗрж╢ржи",
  "ржЖржкржирж╛рж░ ржнрзЯрзЗрж╕ ржПржмржВ ржЯрж┐ржЪрж┐ржВ рж╕рзНржЯрж╛ржЗрж▓ ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рзЗржЧрзЗржЫрзЗ",
  "ржПржХржжржо ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржПржЦржи",
  "ржЖржорж┐ ржирзЛржЯрж╕ ржирж┐рзЯрзЗ ржлрзЗрж▓рзЗржЫрж┐",
  "ржПржЯрж╛ ржЖржЧрзЗ ржЬрж╛ржирж▓рзЗ ржЕржирзЗржХ рж▓рж╛ржн рж╣рждрзЛ",
  "ржкрзНрж░рзНржпрж╛ржХржЯрж┐ржХрзНржпрж╛рж▓ ржЙржжрж╛рж╣рж░ржгржЧрзБрж▓рзЛ ржжрж╛рж░рзБржг",
  "ржПржЗ ржЧрж╛ржЗржбрж▓рж╛ржЗржиржЯрж╛ ржЖржорж╛рж░ ржмрзНржпржмрж╕рж╛ржХрзЗ ржПржЧрж┐рзЯрзЗ ржирзЗржмрзЗ",
  "ржЖржЧрзЗ ржХрзЛржерж╛ржУ ржПржд ржХрзНрж▓рж┐рзЯрж╛рж░ ржкрж╛ржЗржирж┐",
  "ржПржЦржи ржерзЗржХрзЗ ржирждрзБржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржмрзЛ",
  "ржЖржЬржХрзЗрж░ рж╕рзЗрж╢ржи рж╕рждрзНржпрж┐ржЗ ржнрзНржпрж╛рж▓рзБ-ржкрзНржпрж╛ржХржб",
  "рж▓рж╛ржЗржнрзЗ ржПржоржи ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржкрж╛ржУрзЯрж╛ ржнрж╛ржЧрзНржпрзЗрж░ ржмрзНржпрж╛ржкрж╛рж░",
  "ржХржирж╕рзЗржкрзНржЯржЧрзБрж▓рзЛ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж╣рзЯрзЗ ржЧрзЗрж▓",
  "ржЖржорж┐ ржЖржорж╛рж░ ржЯрж┐ржоржХрзЗ ржПржЯрж╛ рж╢рзЗржЦрж╛ржмрзЛ",
  "ржПржЗ ржХрзМрж╢рж▓ржЯрж╛ ржПржХржжржо ржЬрж┐ржирж┐рзЯрж╛рж╕",
  "ржЖржкржирж┐ ржЦрзБржм рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржмрзНрж░рзЗржХржбрж╛ржЙржи ржХрж░рзЗ ржмрж▓ржЫрзЗржи",
  "ржЪржорзОржХрж╛рж░ рж▓рзЗржЧрзЗржЫрзЗ",
  "ржЕржирзЗржХ ржжрж┐ржи ржкрж░ ржПржоржи ржХрж┐ржЫрзБ рж╢рж┐ржЦрж▓рж╛ржо",
  "ржПржЗ рж╕рж┐рж╕рзНржЯрзЗржоржЯрж╛ ржЯрзНрж░рж╛ржЗ ржХрж░рзЗ ржжрзЗржЦржмрзЛ",
  "рж╕ржмржХрж┐ржЫрзБ рж▓рж┐ржЦрзЗ ржирж┐ржЪрзНржЫрж┐",
  "ржПржХржжржо ржлрзНрж░рж┐ ржорж╛рж╕рзНржЯрж╛рж░ржХрзНрж▓рж╛рж╕ ржоржирзЗ рж╣ржЪрзНржЫрзЗ",
  "ржнрж╛ржЗ, рж╕рзНржпрж╛рж▓рзБржЯ ржЖржкржирж╛рж░ ржирж▓рзЗржЬржХрзЗ",
  "ржПржХ ржХржерж╛рзЯ ржЕрж╕рж╛ржзрж╛рж░ржг!",
  "ржПржЯрж╛ ржЖржЧрзЗ ржХрзЛржи ржЯрзНрж░рзЗржирж┐ржВ-ржП ржкрж╛ржЗржирж┐",
  "ржЖржорж╛рж░ ржЪрзЛржЦ ржЦрзБрж▓рзЗ ржЧрзЗрж▓ ржмрж▓рждрзЗ ржкрж╛рж░рзЗржи",
  "ржЗрждрж┐ржоржзрзНржпрзЗ ржлрзНрж░рзЗржирзНржбржжрзЗрж░ ржмрж▓рзЗржЫрж┐ ржПржЗ рж╕рзЗрж╢ржи ржжрзЗржЦрждрзЗ",
  "ржПржЗ ржорзЗржержбржЯрж╛ ржХрж╛ржЬрзЗ ржжрзЗржмрзЗ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣",
  "ржмрж┐ржЬржирзЗрж╕ ржЧрзНрж░рзЛржерзЗрж░ ржЬржирзНржп ржкрж╛рж░ржлрзЗржХрзНржЯ",
  "ржЖржкржирж┐ ржПржХржжржо рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ ржмрзЛржЭрж╛ржЪрзНржЫрзЗржи",
  "ржПржХржжржо рж░рж┐рзЯрзЗрж▓ рж▓рж╛ржЗржл ржПржХрзНрж╕ржкрзЗрж░рж┐рзЯрзЗржирзНрж╕ рж╢рзЗрзЯрж╛рж░ ржХрж░ржЫрзЗржи",
  "ржЖржорж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржирж┐рзЯрзЗ рж░рж╛ржЦрж▓рж╛ржо",
  "ржПржд ржзрзИрж░рзНржп ржзрж░рзЗ ржПржнрж╛ржмрзЗ рж╢рзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж",
  "ржПржЗ рж╕рзНржЯрзНрж░рж╛ржЯрзЗржЬрж┐ ржпржжрж┐ ржЖржЧрзЗ ржЬрж╛ржирждрж╛ржо!",
  "ржирждрзБржи ржЖржЗржбрж┐рзЯрж╛ ржкрзЗрж▓рж╛ржо",
  "ржирзЗржХрзНрж╕ржЯ рж╕рзНрж▓рж╛ржЗржб ржкрзНрж▓рж┐ржЬ",
  "ржоржЬрж╛ ржкрж╛ржЪрзНржЫрж┐ рж╢рж┐ржЦрждрзЗ рж╢рж┐ржЦрждрзЗ",
  "ржнрж╛ржЗ, ржЖржкржирж╛рж░ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕рзНржЯрж╛ржЗрж▓ ржЪржорзОржХрж╛рж░",
  "ржПржЯрж╛ ржЖржорж╛рж░ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯржжрзЗрж░ ржХрж╛ржЬрзЗ рж▓рж╛ржЧржмрзЗ",
  "ржЖржкржирж╛рж░ ржЙржжрж╛рж╣рж░ржгржЧрзБрж▓рзЛ relatable.",
  "ржкрзНрж░ржержоржмрж╛рж░ ржмрзБржЭрж▓рж╛ржо ржмрзНржпрж╛ржкрж╛рж░ржЯрж╛ ржЖрж╕рж▓рзЗ ржХрзА",
  "ржЖржмрж╛рж░ рж░рж┐ржкрзНрж▓рзЗ ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ",
  "ржЖржкржирж┐ ржХрж┐ ржПржЗ ржкрзНрж░рзЗржЬрзЗржирзНржЯрзЗрж╢ржирзЗрж░ ржкрж┐ржбрж┐ржПржл ржжрж┐ржмрзЗржи?",
  "ржЦрзБржм ржоржирзЛржпрзЛржЧ ржжрж┐рзЯрзЗ рж╢рзБржиржЫрж┐",
  "ржорж╛ржерж╛рзЯ ржврзБржХрзЗ ржпрж╛ржЪрзНржЫрзЗ ржПржХржжржо",
  "ржЖржорж┐ ржЖрж░ржУ рж╕рзЗрж╢ржи ржЪрж╛ржЗ ржЖржкржирж╛рж░ ржерзЗржХрзЗ",
  "ржПржЗ рж╕рзНрж▓рж╛ржЗржбржЯрж╛ ржЕржирзЗржХ ржнрж╛рж▓рзЛ",
  "ржкрзНрж▓рж┐ржЬ ржПржХржЯрзБ ржзрзАрж░рзЗ ржмрж▓ржмрзЗржи?",
  "ржУржХрзЗ, ржирзЛржЯ ржХрж░рзЗ рж░рж╛ржЦрж▓рж╛ржо",
  "ржЖржкржирж┐ ржХрж┐ рж░рзЗржХрж░рзНржбрж┐ржВ ржжрж┐ржмрзЗржи?",
  "ржЖржорж┐ ржПржЗ ржЯрзЗржХржирж┐ржХржЯрж╛ ржЖржЬржЗ ржлрж▓рзЛ ржХрж░ржмрзЛ",
  "ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржЦрзБржмржЗ рж╕рж╣ржЬ ржУ ржкрж░рж┐рж╖рзНржХрж╛рж░",
  "ржПржЗ ржЖржЗржбрж┐рзЯрж╛ржЯрж╛ ржЖржЧрзЗ ржорж╛ржерж╛рзЯ ржЖрж╕рзЗржирж┐",
  "ржЖржорж┐ ржмрж┐рж╕рзНржорж┐ржд!",
  "ржирждрзБржи ржжрзГрж╖рзНржЯрж┐ржнржЩрзНржЧрж┐ ржкрзЗрж▓рж╛ржо",
  "ржЧрзЛржкржи рж░рж╣рж╕рзНржп ржлрж╛ржБрж╕ ржХрж░рзЗ ржжрж┐рж▓рзЗржи ржЖржЬ!",
  "ржЖржЧрзЗ ржПржд рж╕рзБржирзНржжрж░ рж╢рзЗржЦрж╛рждрзЗ ржХрзЗржЙ ржжрзЗржЦрж┐ржирж┐",
  "рж╕ржм ржорж┐рж▓рж┐рзЯрзЗ рж╕рзЗрж╢ржиржЯрж╛ ржЕрж╕рж╛ржзрж╛рж░ржг",
  "ржПржЯрж╛ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рж▓рзЗ рж░рзЗржЬрж╛рж▓рзНржЯ ржирж┐рж╢рзНржЪрж┐ржд",
  "ржЖржЬржХрзЗрж░ рж╕рзЗрж╢ржирзЗ рж╕ржорзЯ ржжрж╛рж░рзБржг ржЗржиржнрзЗрж╕рзНржЯ рж╣рж▓",
  "ржЖрж╢рж╛ ржХрж░рж┐ ржнржмрж┐рж╖рзНржпрждрзЗ ржЖрж░ржУ рж╕рзЗрж╢ржи ржХрж░ржмрзЗржи",
  "ржЖржорж┐ ржПржХржжржо ржПржХржЯрзБржУ ржмрж┐рж░ржХрзНржд рж╣ржЗржирж┐",
  "ржПржЯрж╛ рж╕рждрзНржпрж┐ ржЧрзЗржо ржЪрзЗржЮрзНржЬрж╛рж░!",
  "ржоржирзЗ рж╣ржЪрзНржЫрзЗ рж╕ржарж┐ржХ ржЬрж╛рзЯржЧрж╛рзЯ ржЗржиржнрзЗрж╕рзНржЯ ржХрж░рзЗржЫрж┐",
  "рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд ржерж╛ржХржмрзЛ, ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ"
];

const fakeNames = [
  "рж░ржлрж┐ржХрзБрж▓ ржЗрж╕рж▓рж╛ржо", "рж╕рж╛ржмрж░рж┐ржирж╛ рж╕рзБрж▓рждрж╛ржирж╛", "ржорж╛рж╣ржорзБржжрзБрж▓ рж╣рж╛рж╕рж╛ржи", "рждрж╛ржиржЬрж┐рж▓рж╛ ржЖржХрзНрждрж╛рж░", "ржЗржорж░рж╛ржи рж╣рзЛрж╕рзЗржи",
  "ржорзЗрж╣ржЬрж╛ржмрж┐ржи рж░рж╣ржорж╛ржи", "ржЬрж╕рж┐ржо ржЙржжрзНржжрж┐ржи", "ржлрж╛рж░рж╣рж╛ржирж╛ ржЖржХрзНрждрж╛рж░", "рж╕рж╛ржжрж┐ржХрзБрж░ рж░рж╣ржорж╛ржи", "ржорж╛рж╣ржорзБржжрж╛ ржЦрж╛рждрзБржи",
  "рж░рж┐ржЬржУрзЯрж╛ржи ржХрж░рж┐ржо", "рж╢рж╛рж░ржорж┐ржи рж╕рзБрж▓рждрж╛ржирж╛", "рждрж╛ржиржнрзАрж░ ржЖрж╣ржорзЗржж", "ржорж╛рж╣рзА ржЖржХрзНрждрж╛рж░", "ржирж╛рж╕рж┐ржо ржЙржжрзНржжрж┐ржи",
  "рж░рзБржмрж╛ржЗрзЯрж╛ ржЦрж╛ржи", "ржорзЛрж╢рж╛рж░рж░ржл рж╣рзЛрж╕рзЗржи", "рж╕рзБржмрж░рзНржгрж╛ ржЗрж╕рж▓рж╛ржо", "рж╢ржлрж┐ржХрзБрж▓ ржЗрж╕рж▓рж╛ржо", "ржорж┐ржо ржЖржХрзНрждрж╛рж░",
  "рж░рж╛рж╢рзЗржжрзБрж▓ ржЗрж╕рж▓рж╛ржо", "рж╕рж╛ржорж┐рзЯрж╛ рж╣рзЛрж╕рзЗржи", "ржЖрж░рж┐ржлрзБрж▓ ржЗрж╕рж▓рж╛ржо", "рж╕рж╛ржжрж┐рзЯрж╛ рж╕рзБрж▓рждрж╛ржирж╛", "рж░рзБржмрзЗрж▓ ржорж┐рзЯрж╛",
  "ржлрж╛рж░ржЬрж╛ржирж╛ ржЗрзЯрж╛рж╕ржорж┐ржи", "рж╕рзИржХржд ржЖрж╣ржорзЗржж", "ржирзБрж╕рж░рж╛ржд ржЬрж╛рж╣рж╛ржи", "ржорж╛рж╕рзБржо ржмрж┐рж▓рзНрж▓рж╛рж╣", "ржЕрж░рзНржкрж┐рждрж╛ рж╕рзЗржи",
  "рж╢рж╛ржХрж┐рж▓ ржЖрж╣ржорзЗржж", "ржорж╛рж╣рзАрж░ ржЗрж╕рж▓рж╛ржо"
];

export const EvergreenWebinarElement: React.FC<{
  element: PageBuilderElement;
  isEditing?: boolean;
  deviceType?: 'desktop' | 'tablet' | 'mobile';
  onUpdate?: (updates: Partial<PageBuilderElement>) => void;
}> = ({ element, deviceType = 'desktop' }) => {
  const {
    videoUrl = '',
    thumbnail = '',
    enableCountdown = false,
    countdownSeconds = 5,
    enableChat = true,
    viewerCount = 237,
    showChatMessages = true,
    showLiveBadge = true,
    liveBadgePosition = 'top-right',
    liveBadgeStyle = 'pulse-text',
    widthByDevice,
    muted = true,
  } = element.content as any;

  const [countdown, setCountdown] = useState<number | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showVideo, setShowVideo] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [currentViewerCount, setCurrentViewerCount] = useState(viewerCount);
  const [isUnmuted, setIsUnmuted] = useState(false);
  const [showUnmuteButton, setShowUnmuteButton] = useState(false);
  const playerRef = useRef<HTMLIFrameElement>(null);
  const unmuteAttempts = useRef(0);

  // Parse video URL
  const videoInfo = videoUrl ? parseVideoUrl(videoUrl) : null;
  const thumbnailUrl = thumbnail || (videoInfo?.thumbnailUrl || 'https://via.placeholder.com/1280x720?text=Webinar+Starting+Soon');

  // Start countdown when component mounts
  useEffect(() => {
    if (enableCountdown && !isPlaying) {
      setCountdown(countdownSeconds);
    } else if (!enableCountdown && !isPlaying) {
      // If no countdown, just show the video after a brief moment
      setTimeout(() => {
        setShowVideo(true);
        setIsPlaying(true);
      }, 500);
    }
  }, []);

  // Countdown logic
  useEffect(() => {
    if (countdown !== null && countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (countdown === 0) {
      setTimeout(() => {
        setShowVideo(true);
        setIsPlaying(true);
        setCountdown(null);
      }, 1000);
    }
  }, [countdown]);

  // Initialize chat messages
  useEffect(() => {
    if (enableChat && isPlaying && showChatMessages) {
      // Add initial messages
      const initialMessages: ChatMessage[] = [];
      for (let i = 0; i < 3; i++) {
        initialMessages.push({
          id: `msg-${Date.now()}-${i}`,
          name: fakeNames[Math.floor(Math.random() * fakeNames.length)],
          message: chatMessagePool[Math.floor(Math.random() * chatMessagePool.length)],
          timestamp: Date.now() - (3 - i) * 3000,
        });
      }
      setChatMessages(initialMessages);

      // Add new messages periodically
      const addMessage = () => {
        setChatMessages((prev) => {
          const newMessage: ChatMessage = {
            id: `msg-${Date.now()}`,
            name: fakeNames[Math.floor(Math.random() * fakeNames.length)],
            message: chatMessagePool[Math.floor(Math.random() * chatMessagePool.length)],
            timestamp: Date.now(),
          };
          // Keep only last 15 messages
          return [...prev.slice(-14), newMessage];
        });
      };

      // Initial delay then periodic messages
      const interval1 = setTimeout(() => {
        addMessage();
        const interval2 = setInterval(() => {
          addMessage();
        }, 3000 + Math.random() * 7000); // 3-10 seconds apart
        return () => clearInterval(interval2);
      }, 2000);

      return () => {
        clearTimeout(interval1);
      };
    }
  }, [enableChat, isPlaying, showChatMessages]);

  // Simulate viewer count changes
  useEffect(() => {
    if (enableChat && isPlaying) {
      const interval = setInterval(() => {
        setCurrentViewerCount((prev) => prev + Math.floor(Math.random() * 3) - 1);
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [enableChat, isPlaying]);

  // Show unmute button when video starts playing
  useEffect(() => {
    if (showVideo && videoInfo && !isUnmuted) {
      // Show the unmute button after 1 second of video playing
      const timer = setTimeout(() => {
        setShowUnmuteButton(true);
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [showVideo, videoInfo, isUnmuted]);

  // Handle unmute button click
  const handleUnmute = () => {
    if (playerRef.current?.contentWindow) {
      // Try to unmute multiple times
      for (let i = 0; i < 5; i++) {
        setTimeout(() => {
          if (playerRef.current?.contentWindow) {
            playerRef.current.contentWindow.postMessage(
              '{"event":"command","func":"unMute","args":""}',
              '*'
            );
          }
        }, i * 200); // Try every 200ms for 1 second
      }
      setIsUnmuted(true);
      setShowUnmuteButton(false);
    }
  };

  // Build YouTube embed URL with all customization
  const buildEmbedUrl = () => {
    if (!videoInfo || videoInfo.type !== 'youtube') return '';
    
    const url = new URL(`https://www.youtube.com/embed/${videoInfo.id}`);
    url.searchParams.set('autoplay', '1');
    url.searchParams.set('controls', '0'); // No player controls
    url.searchParams.set('modestbranding', '1'); // Hide YouTube logo
    url.searchParams.set('rel', '0'); // Don't show related videos
    url.searchParams.set('showinfo', '0'); // Hide title/info
    url.searchParams.set('branding', '0'); // No branding
    url.searchParams.set('fs', '0'); // Disable fullscreen
    url.searchParams.set('iv_load_policy', '3'); // Hide annotations
    url.searchParams.set('loop', '1'); // Loop video
    url.searchParams.set('mute', '1'); // Start muted (will unmute via JS)
    url.searchParams.set('playsinline', '1');
    url.searchParams.set('disablekb', '1'); // Disable keyboard controls
    
    return url.toString();
  };

  const containerStyles = renderElementStyles(element, deviceType);
  const { width: _, maxWidth: __, minWidth: ___, ...cleanContainerStyles } = containerStyles;

  const normalizedWidthByDevice = {
    desktop: widthByDevice?.desktop || 'full',
    tablet: widthByDevice?.tablet || 'full',
    mobile: widthByDevice?.mobile || 'full',
  };

  const getEffectiveWidth = () => {
    switch (deviceType) {
      case 'mobile':
        return normalizedWidthByDevice.mobile;
      case 'tablet':
        return normalizedWidthByDevice.tablet;
      default:
        return normalizedWidthByDevice.desktop;
    }
  };

  const effectiveWidth = getEffectiveWidth();

  const widthClasses = {
    full: 'w-full',
    'three-quarters': 'w-[75%] mx-auto',
    half: 'w-1/2 mx-auto',
  };

  const getLiveBadgeStyles = () => {
    const baseStyles = 'absolute z-20';
    
    const positionStyles = {
      'top-left': 'top-4 left-4',
      'top-right': 'top-4 right-4',
      'bottom-left': 'bottom-4 left-4',
      'bottom-right': 'bottom-4 right-4',
    };

    return `${baseStyles} ${positionStyles[liveBadgePosition as keyof typeof positionStyles]}`;
  };

  // Format countdown display based on seconds
  const formatCountdown = (seconds: number) => {
    if (seconds < 60) {
      return seconds.toString();
    }
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div style={cleanContainerStyles} className={`${widthClasses[effectiveWidth as keyof typeof widthClasses] || 'w-full'}`}>
      <div 
        className="relative w-full bg-black"
        style={{ aspectRatio: '16/9' }}
        onContextMenu={(e) => e.preventDefault()}
      >
        {/* Live Badge */}
        {showLiveBadge && isPlaying && (
          <div className={getLiveBadgeStyles()}>
            {liveBadgeStyle === 'pulse-text' && (
              <div className="bg-red-600 text-white px-4 py-2 rounded-full flex items-center gap-2 animate-pulse">
                <Radio className="h-4 w-4 fill-current" />
                <span className="font-bold">LIVE</span>
              </div>
            )}
            {liveBadgeStyle === 'red-dot' && (
              <div className="bg-red-600 rounded-full p-2 animate-pulse">
                <div className="w-3 h-3 bg-red-400 rounded-full" />
              </div>
            )}
            {liveBadgeStyle === 'pulse-bg' && (
              <div className="bg-red-600 text-white px-6 py-3 rounded-lg font-bold relative overflow-hidden animate-pulse">
                <span className="relative z-10">LIVE</span>
                <div className="absolute inset-0 bg-red-700 animate-ping" />
              </div>
            )}
          </div>
        )}

        {/* Before video starts - Thumbnail */}
        {!showVideo && (
          <div className="relative w-full h-full">
            <img 
              src={thumbnailUrl} 
              alt="Webinar" 
              className="w-full h-full object-cover"
            />
            
            {/* Countdown Overlay */}
            {countdown !== null && (
              <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="text-center">
                  {countdown > 0 ? (
                    <div className="text-white">
                      <div className="text-9xl font-bold animate-pulse">{formatCountdown(countdown)}</div>
                      <div className="text-2xl mt-4">
                        {countdown > 60 ? 'рж╢рзБрж░рзБ рж╣ржмрзЗ...' : 'Starting in...'}
                      </div>
                    </div>
                  ) : (
                    <div className="text-white text-6xl font-bold animate-pulse">LIVE!</div>
                  )}
                </div>
              </div>
            )}

            {/* Play button overlay if no countdown */}
            {countdown === null && !showVideo && !enableCountdown && (
              <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30">
                <div className="bg-white bg-opacity-90 rounded-full p-6">
                  <Play className="h-16 w-16 text-black ml-2" fill="currentColor" />
                </div>
              </div>
            )}
          </div>
        )}

        {/* Video Player */}
        {showVideo && videoInfo && (
          <>
            <iframe
              ref={playerRef}
              src={buildEmbedUrl()}
              className="w-full h-full"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              style={{ pointerEvents: 'none' }} // Disable all iframe interactions
            />
            
            {/* Invisible overlay to block ALL interactions with iframe */}
            <div 
              className="absolute inset-0 bg-transparent z-10 cursor-default"
              onContextMenu={(e) => e.preventDefault()}
              onMouseDown={(e) => e.preventDefault()}
              onClick={(e) => e.preventDefault()}
              onDoubleClick={(e) => e.preventDefault()}
              style={{ 
                pointerEvents: 'auto',
                touchAction: 'none'
              }}
            />
          </>
        )}

        {/* Viewer Count */}
        {enableChat && isPlaying && (
          <div className="absolute bottom-4 left-4 bg-black bg-opacity-75 text-white px-3 py-2 rounded-lg flex items-center gap-2 z-20">
            <Users className="h-4 w-4" />
            <span className="text-sm font-medium">{currentViewerCount} watching</span>
          </div>
        )}

        {/* Unmute Button */}
        {showUnmuteButton && isPlaying && (
          <div className="absolute bottom-4 right-4 z-30">
            <button
              onClick={handleUnmute}
              onContextMenu={(e) => e.preventDefault()}
              className="bg-white text-black px-4 py-3 rounded-lg flex items-center gap-2 hover:bg-gray-100 transition-colors shadow-lg font-medium"
              style={{ pointerEvents: 'auto' }}
            >
              <Volume2 className="h-5 w-5" />
              <span>Unmute Sound</span>
            </button>
          </div>
        )}
      </div>

      {/* Live Chat Panel */}
      {enableChat && showChatMessages && isPlaying && (
        <div className="mt-4 bg-gray-900 rounded-lg p-4" style={{ maxHeight: '300px' }}>
          <div className="flex items-center gap-2 mb-3 text-white">
            <MessageCircle className="h-5 w-5" />
            <h4 className="font-semibold">Live Chat</h4>
          </div>
          <div className="overflow-y-auto space-y-2" style={{ maxHeight: '250px' }}>
            {chatMessages.map((msg) => (
              <div key={msg.id} className="text-sm text-white animate-in slide-in-from-top duration-300">
                <span className="font-medium text-blue-400">{msg.name}</span>
                <span className="text-gray-300 ml-2">{msg.message}</span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

